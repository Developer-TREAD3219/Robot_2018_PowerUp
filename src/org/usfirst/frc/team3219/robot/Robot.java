// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team3219.robot;

import org.usfirst.frc.team3219.robot.commands.AutoForward;
import org.usfirst.frc.team3219.robot.subsystems.AutoManager;
import org.usfirst.frc.team3219.robot.subsystems.DriveTrain;
import org.usfirst.frc.team3219.robot.subsystems.PowerManagment;
import org.usfirst.frc.team3219.robot.subsystems.Sensors;
import org.usfirst.frc.team3219.robot.subsystems.Shooter;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in the
 * project.
 */
public class Robot extends TimedRobot {

	public static Command autonomousManager;
	public static Command autoForward;
	public static SendableChooser<String> startPositionChooser = new SendableChooser<>();
	public static SendableChooser<String> strategyChooser = new SendableChooser<>();

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static DriveTrain driveTrain;
	public static Shooter shooter;
	public static PowerManagment powerManagment;
	public static AutoManager autoManager;
	public static boolean allianceSwitch;
	public static boolean scale;
	public static boolean opposingSwitch;
	public static final int DISTANCE_TO_AUTOLINE = 120;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	/**
	 * This function is run when the robot is first started up and should be used
	 * for any initialization code.
	 */
	@Override
	public void robotInit() {
		RobotMap.init();
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveTrain = new DriveTrain();
		driveTrain.init();

		shooter = new Shooter();
		shooter.init();
		
		autoManager = new AutoManager();

		powerManagment = new PowerManagment();
		powerManagment.init();
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();
		
		autoForward = new AutoForward(DISTANCE_TO_AUTOLINE);

		autonomousManager = new AutoManager();
		startPositionChooser.addDefault("Left", "Left");
		startPositionChooser.addObject("Center", "Center");
		startPositionChooser.addObject("Right", "Right");
		SmartDashboard.putData("Start Position", startPositionChooser);
		
		strategyChooser.addDefault("AutoLine", "AutoLine");
		strategyChooser.addObject("AutoLine & Switch", "AutoLine & Switch");
		strategyChooser.addObject("AutoLine & Scale", "AutoLine & Scale");
		SmartDashboard.putData("Strategy", strategyChooser);
	}

	/**
	 * This function is called when the disabled button is hit. You can use it to
	 * reset subsystems before shutting down.
	 */
	@Override
	public void disabledInit() {

	}

	@Override
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
		Sensors.heading();
	}

	@Override
	public void autonomousInit() {
		if (autonomousManager == null) {
			//autonomousCommand = chooser.getSelected();
		}
		// schedule the autonomous command (example)
		if (autonomousManager != null) 
			autonomousManager.start();
		SmartDashboard.putString("Switch Side", Robot.allianceSwitch ? "Left" : "Right");
		SmartDashboard.putString("Scale Side", Robot.scale ? "Left" : "Right");
		SmartDashboard.putString("Opposing Switch Side", Robot.opposingSwitch ? "Left" : "Right");
		
	}
	
	/**
	 * This function is called periodically during autonomous
	 */
	@Override
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
		Sensors.heading();
	}

	@Override
	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousManager != null)
			autonomousManager.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	@Override
	public void teleopPeriodic() {
		Scheduler.getInstance().run();
		SmartDashboard.putNumber("Left Encoder", Robot.driveTrain.leftDistance());
		SmartDashboard.putNumber("Right Encoder", Robot.driveTrain.rightDistance());
	}
}
